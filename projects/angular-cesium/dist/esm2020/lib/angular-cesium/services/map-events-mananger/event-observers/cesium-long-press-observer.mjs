import { merge, of as observableOf } from 'rxjs';
import { delay, filter, mergeMap, publish, takeUntil, tap } from 'rxjs/operators';
import { CesiumPureEventObserver } from './cesium-pure-event-observer';
import { CesiumEvent } from '../consts/cesium-event.enum';
export class CesiumLongPressObserver extends CesiumPureEventObserver {
    constructor(event, modifier, eventFactory) {
        super(event, modifier);
        this.event = event;
        this.modifier = modifier;
        this.eventFactory = eventFactory;
    }
    init() {
        let startEvent;
        let stopEvent;
        if (this.event === CesiumEvent.LONG_LEFT_PRESS) {
            startEvent = CesiumEvent.LEFT_DOWN;
            stopEvent = CesiumEvent.LEFT_UP;
        }
        else if (this.event === CesiumEvent.LONG_RIGHT_PRESS) {
            startEvent = CesiumEvent.RIGHT_DOWN;
            stopEvent = CesiumEvent.RIGHT_UP;
        }
        else if (this.event === CesiumEvent.LONG_MIDDLE_PRESS) {
            startEvent = CesiumEvent.MIDDLE_DOWN;
            stopEvent = CesiumEvent.MIDDLE_UP;
        }
        // Save start event position
        let startEventPosition = null;
        const startEventObservable = this.eventFactory.get(startEvent, this.modifier)
            .pipe(tap((movement) => (startEventPosition = movement.endPosition)));
        // Prevent drag mistaken for long press by observing mouse move far from start event position
        const mouseMoveEventObservable = this.eventFactory.get(CesiumEvent.MOUSE_MOVE)
            .pipe(filter((movement) => Math.abs(movement.endPosition.x - startEventPosition.x) > CesiumLongPressObserver.LONG_PRESS_EVENTS_MIN_DISTANCE_PX ||
            Math.abs(movement.endPosition.y - startEventPosition.y) > CesiumLongPressObserver.LONG_PRESS_EVENTS_MIN_DISTANCE_PX));
        const stopEventObservable = merge(this.eventFactory.get(stopEvent, this.modifier), mouseMoveEventObservable);
        // publish for preventing side effect
        const longPressObservable = publish()(startEventObservable.pipe(mergeMap((e) => observableOf(e).pipe(delay(CesiumLongPressObserver.LONG_PRESS_EVENTS_DURATION), takeUntil(stopEventObservable)))));
        return longPressObservable;
    }
}
CesiumLongPressObserver.LONG_PRESS_EVENTS_DURATION = 250;
CesiumLongPressObserver.LONG_PRESS_EVENTS_MIN_DISTANCE_PX = 10;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VzaXVtLWxvbmctcHJlc3Mtb2JzZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2FuZ3VsYXItY2VzaXVtL3NlcnZpY2VzL21hcC1ldmVudHMtbWFuYW5nZXIvZXZlbnQtb2JzZXJ2ZXJzL2Nlc2l1bS1sb25nLXByZXNzLW9ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBeUIsS0FBSyxFQUFFLEVBQUUsSUFBSSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBSTFELE1BQU0sT0FBTyx1QkFBd0IsU0FBUSx1QkFBdUI7SUFJbEUsWUFBc0IsS0FBa0IsRUFDbEIsUUFBNkIsRUFDL0IsWUFBZ0M7UUFDbEQsS0FBSyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUhILFVBQUssR0FBTCxLQUFLLENBQWE7UUFDbEIsYUFBUSxHQUFSLFFBQVEsQ0FBcUI7UUFDL0IsaUJBQVksR0FBWixZQUFZLENBQW9CO0lBRXBELENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxVQUF1QixDQUFDO1FBQzVCLElBQUksU0FBc0IsQ0FBQztRQUUzQixJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssV0FBVyxDQUFDLGVBQWUsRUFBRTtZQUM5QyxVQUFVLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQztZQUNuQyxTQUFTLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQztTQUNqQzthQUFNLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxXQUFXLENBQUMsZ0JBQWdCLEVBQUU7WUFDdEQsVUFBVSxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUM7WUFDcEMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUM7U0FDbEM7YUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssV0FBVyxDQUFDLGlCQUFpQixFQUFFO1lBQ3ZELFVBQVUsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDO1lBQ3JDLFNBQVMsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDO1NBQ25DO1FBRUQsNEJBQTRCO1FBQzVCLElBQUksa0JBQWtCLEdBQWUsSUFBSSxDQUFDO1FBQzFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDMUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhFLDZGQUE2RjtRQUM3RixNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUM7YUFDM0UsSUFBSSxDQUNILE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEdBQUcsdUJBQXVCLENBQUMsaUNBQWlDO1lBQ25ILElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEdBQUcsdUJBQXVCLENBQUMsaUNBQWlDLENBQ3BILENBQ0YsQ0FBQztRQUVKLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxDQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUMvQyx3QkFBd0IsQ0FDekIsQ0FBQztRQUVGLHFDQUFxQztRQUNyQyxNQUFNLG1CQUFtQixHQUFHLE9BQU8sRUFBRSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FDN0QsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNsQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsMEJBQTBCLENBQUMsRUFDekQsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUNuQyxDQUFDLENBQUM7UUFDSCxPQUFPLG1CQUFtQixDQUFDO0lBQzdCLENBQUM7O0FBbERhLGtEQUEwQixHQUFHLEdBQUcsQ0FBQztBQUNqQyx5REFBaUMsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25uZWN0YWJsZU9ic2VydmFibGUsIG1lcmdlLCBvZiBhcyBvYnNlcnZhYmxlT2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGVsYXksIGZpbHRlciwgbWVyZ2VNYXAsIHB1Ymxpc2gsIHRha2VVbnRpbCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDYXJ0ZXNpYW4yIH0gZnJvbSAnY2VzaXVtJztcclxuaW1wb3J0IHsgQ2VzaXVtUHVyZUV2ZW50T2JzZXJ2ZXIgfSBmcm9tICcuL2Nlc2l1bS1wdXJlLWV2ZW50LW9ic2VydmVyJztcclxuaW1wb3J0IHsgQ2VzaXVtRXZlbnQgfSBmcm9tICcuLi9jb25zdHMvY2VzaXVtLWV2ZW50LmVudW0nO1xyXG5pbXBvcnQgeyBDZXNpdW1FdmVudE1vZGlmaWVyIH0gZnJvbSAnLi4vY29uc3RzL2Nlc2l1bS1ldmVudC1tb2RpZmllci5lbnVtJztcclxuaW1wb3J0IHsgQ2VzaXVtRXZlbnRCdWlsZGVyIH0gZnJvbSAnLi4vY2VzaXVtLWV2ZW50LWJ1aWxkZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIENlc2l1bUxvbmdQcmVzc09ic2VydmVyIGV4dGVuZHMgQ2VzaXVtUHVyZUV2ZW50T2JzZXJ2ZXIge1xyXG4gIHB1YmxpYyBzdGF0aWMgTE9OR19QUkVTU19FVkVOVFNfRFVSQVRJT04gPSAyNTA7XHJcbiAgcHVibGljIHN0YXRpYyBMT05HX1BSRVNTX0VWRU5UU19NSU5fRElTVEFOQ0VfUFggPSAxMDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGV2ZW50OiBDZXNpdW1FdmVudCxcclxuICAgICAgICAgICAgICBwcm90ZWN0ZWQgbW9kaWZpZXI6IENlc2l1bUV2ZW50TW9kaWZpZXIsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBldmVudEZhY3Rvcnk6IENlc2l1bUV2ZW50QnVpbGRlcikge1xyXG4gICAgc3VwZXIoZXZlbnQsIG1vZGlmaWVyKTtcclxuICB9XHJcblxyXG4gIGluaXQoKTogQ29ubmVjdGFibGVPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgbGV0IHN0YXJ0RXZlbnQ6IENlc2l1bUV2ZW50O1xyXG4gICAgbGV0IHN0b3BFdmVudDogQ2VzaXVtRXZlbnQ7XHJcblxyXG4gICAgaWYgKHRoaXMuZXZlbnQgPT09IENlc2l1bUV2ZW50LkxPTkdfTEVGVF9QUkVTUykge1xyXG4gICAgICBzdGFydEV2ZW50ID0gQ2VzaXVtRXZlbnQuTEVGVF9ET1dOO1xyXG4gICAgICBzdG9wRXZlbnQgPSBDZXNpdW1FdmVudC5MRUZUX1VQO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmV2ZW50ID09PSBDZXNpdW1FdmVudC5MT05HX1JJR0hUX1BSRVNTKSB7XHJcbiAgICAgIHN0YXJ0RXZlbnQgPSBDZXNpdW1FdmVudC5SSUdIVF9ET1dOO1xyXG4gICAgICBzdG9wRXZlbnQgPSBDZXNpdW1FdmVudC5SSUdIVF9VUDtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5ldmVudCA9PT0gQ2VzaXVtRXZlbnQuTE9OR19NSURETEVfUFJFU1MpIHtcclxuICAgICAgc3RhcnRFdmVudCA9IENlc2l1bUV2ZW50Lk1JRERMRV9ET1dOO1xyXG4gICAgICBzdG9wRXZlbnQgPSBDZXNpdW1FdmVudC5NSURETEVfVVA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2F2ZSBzdGFydCBldmVudCBwb3NpdGlvblxyXG4gICAgbGV0IHN0YXJ0RXZlbnRQb3NpdGlvbjogQ2FydGVzaWFuMiA9IG51bGw7XHJcbiAgICBjb25zdCBzdGFydEV2ZW50T2JzZXJ2YWJsZSA9IHRoaXMuZXZlbnRGYWN0b3J5LmdldChzdGFydEV2ZW50LCB0aGlzLm1vZGlmaWVyKVxyXG4gICAgICAucGlwZSh0YXAoKG1vdmVtZW50KSA9PiAoc3RhcnRFdmVudFBvc2l0aW9uID0gbW92ZW1lbnQuZW5kUG9zaXRpb24pKSk7XHJcblxyXG4gICAgLy8gUHJldmVudCBkcmFnIG1pc3Rha2VuIGZvciBsb25nIHByZXNzIGJ5IG9ic2VydmluZyBtb3VzZSBtb3ZlIGZhciBmcm9tIHN0YXJ0IGV2ZW50IHBvc2l0aW9uXHJcbiAgICBjb25zdCBtb3VzZU1vdmVFdmVudE9ic2VydmFibGUgPSB0aGlzLmV2ZW50RmFjdG9yeS5nZXQoQ2VzaXVtRXZlbnQuTU9VU0VfTU9WRSlcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgZmlsdGVyKChtb3ZlbWVudCkgPT4gXHJcbiAgICAgICAgICBNYXRoLmFicyhtb3ZlbWVudC5lbmRQb3NpdGlvbi54IC0gc3RhcnRFdmVudFBvc2l0aW9uLngpID4gQ2VzaXVtTG9uZ1ByZXNzT2JzZXJ2ZXIuTE9OR19QUkVTU19FVkVOVFNfTUlOX0RJU1RBTkNFX1BYIHx8XHJcbiAgICAgICAgICBNYXRoLmFicyhtb3ZlbWVudC5lbmRQb3NpdGlvbi55IC0gc3RhcnRFdmVudFBvc2l0aW9uLnkpID4gQ2VzaXVtTG9uZ1ByZXNzT2JzZXJ2ZXIuTE9OR19QUkVTU19FVkVOVFNfTUlOX0RJU1RBTkNFX1BYXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG5cclxuICAgIGNvbnN0IHN0b3BFdmVudE9ic2VydmFibGUgPSBtZXJnZShcclxuICAgICAgdGhpcy5ldmVudEZhY3RvcnkuZ2V0KHN0b3BFdmVudCwgdGhpcy5tb2RpZmllciksXHJcbiAgICAgIG1vdXNlTW92ZUV2ZW50T2JzZXJ2YWJsZSBcclxuICAgICk7XHJcblxyXG4gICAgLy8gcHVibGlzaCBmb3IgcHJldmVudGluZyBzaWRlIGVmZmVjdFxyXG4gICAgY29uc3QgbG9uZ1ByZXNzT2JzZXJ2YWJsZSA9IHB1Ymxpc2goKShzdGFydEV2ZW50T2JzZXJ2YWJsZS5waXBlKFxyXG4gICAgICBtZXJnZU1hcCgoZSkgPT4gb2JzZXJ2YWJsZU9mKGUpLnBpcGUoXHJcbiAgICAgICAgZGVsYXkoQ2VzaXVtTG9uZ1ByZXNzT2JzZXJ2ZXIuTE9OR19QUkVTU19FVkVOVFNfRFVSQVRJT04pLFxyXG4gICAgICAgIHRha2VVbnRpbChzdG9wRXZlbnRPYnNlcnZhYmxlKSkpLFxyXG4gICAgKSk7XHJcbiAgICByZXR1cm4gbG9uZ1ByZXNzT2JzZXJ2YWJsZTtcclxuICB9XHJcbn1cclxuIl19