import { PrimitiveCollection, GeometryInstance, Primitive } from 'cesium';
import { PrimitivesDrawerService } from '../../primitives-drawer/primitives-drawer.service';
/**
 *
 * This drawer is deprecated.
 * General static primitives drawer responsible of drawing static Cesium primitives with material.
 */
export class StaticPrimitiveDrawer extends PrimitivesDrawerService {
    constructor(geometryType, cesiumService) {
        super(PrimitiveCollection, cesiumService);
        this.geometryType = geometryType;
    }
    add(geometryProps, instanceProps, primitiveProps) {
        if (Object.keys(instanceProps).length === 0) {
            throw (new Error('instanceProps object is empty'));
        }
        instanceProps.geometry = new this.geometryType(geometryProps);
        primitiveProps.geometryInstances = new GeometryInstance(instanceProps);
        primitiveProps.asynchronous = false;
        const primitive = new Primitive(primitiveProps);
        return super.add(primitive);
    }
    update(primitive, geometryProps, instanceProps, primitiveProps) {
        instanceProps.geometry = new this.geometryType(geometryProps);
        primitiveProps.geometryInstances = new GeometryInstance(instanceProps);
        this._cesiumCollection.remove(primitive);
        return super.add(new Primitive(primitiveProps));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljLXByaW1pdGl2ZS1kcmF3ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYW5ndWxhci1jZXNpdW0vc2VydmljZXMvZHJhd2Vycy9zdGF0aWMtZHluYW1pYy9zdGF0aWMtcHJpbWl0aXZlLWRyYXdlci9zdGF0aWMtcHJpbWl0aXZlLWRyYXdlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDMUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFHNUY7Ozs7R0FJRztBQUNILE1BQU0sT0FBZ0IscUJBQXNCLFNBQVEsdUJBQXVCO0lBQ3pFLFlBQW9CLFlBQWlCLEVBQUUsYUFBNEI7UUFDakUsS0FBSyxDQUFDLG1CQUFtQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRHhCLGlCQUFZLEdBQVosWUFBWSxDQUFLO0lBRXJDLENBQUM7SUFFRCxHQUFHLENBQUMsYUFBa0IsRUFBRSxhQUFrQixFQUFFLGNBQW1CO1FBQzdELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzNDLE1BQUssQ0FBQyxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxhQUFhLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM5RCxjQUFjLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN2RSxjQUFjLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoRCxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFjLEVBQUUsYUFBa0IsRUFBRSxhQUFrQixFQUFFLGNBQW1CO1FBQ2hGLGFBQWEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlELGNBQWMsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDekMsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpbWl0aXZlQ29sbGVjdGlvbiwgR2VvbWV0cnlJbnN0YW5jZSwgUHJpbWl0aXZlIH0gZnJvbSAnY2VzaXVtJztcclxuaW1wb3J0IHsgUHJpbWl0aXZlc0RyYXdlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9wcmltaXRpdmVzLWRyYXdlci9wcmltaXRpdmVzLWRyYXdlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2VzaXVtU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2Nlc2l1bS9jZXNpdW0uc2VydmljZSc7XHJcblxyXG4vKipcclxuICpcclxuICogVGhpcyBkcmF3ZXIgaXMgZGVwcmVjYXRlZC5cclxuICogR2VuZXJhbCBzdGF0aWMgcHJpbWl0aXZlcyBkcmF3ZXIgcmVzcG9uc2libGUgb2YgZHJhd2luZyBzdGF0aWMgQ2VzaXVtIHByaW1pdGl2ZXMgd2l0aCBtYXRlcmlhbC5cclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdGF0aWNQcmltaXRpdmVEcmF3ZXIgZXh0ZW5kcyBQcmltaXRpdmVzRHJhd2VyU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBnZW9tZXRyeVR5cGU6IGFueSwgY2VzaXVtU2VydmljZTogQ2VzaXVtU2VydmljZSkge1xyXG4gICAgc3VwZXIoUHJpbWl0aXZlQ29sbGVjdGlvbiwgY2VzaXVtU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICBhZGQoZ2VvbWV0cnlQcm9wczogYW55LCBpbnN0YW5jZVByb3BzOiBhbnksIHByaW1pdGl2ZVByb3BzOiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKE9iamVjdC5rZXlzKGluc3RhbmNlUHJvcHMpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICB0aHJvdyhuZXcgRXJyb3IoJ2luc3RhbmNlUHJvcHMgb2JqZWN0IGlzIGVtcHR5JykpO1xyXG4gICAgfVxyXG4gICAgaW5zdGFuY2VQcm9wcy5nZW9tZXRyeSA9IG5ldyB0aGlzLmdlb21ldHJ5VHlwZShnZW9tZXRyeVByb3BzKTtcclxuICAgIHByaW1pdGl2ZVByb3BzLmdlb21ldHJ5SW5zdGFuY2VzID0gbmV3IEdlb21ldHJ5SW5zdGFuY2UoaW5zdGFuY2VQcm9wcyk7XHJcbiAgICBwcmltaXRpdmVQcm9wcy5hc3luY2hyb25vdXMgPSBmYWxzZTtcclxuICAgIGNvbnN0IHByaW1pdGl2ZSA9IG5ldyBQcmltaXRpdmUocHJpbWl0aXZlUHJvcHMpO1xyXG4gICAgcmV0dXJuIHN1cGVyLmFkZChwcmltaXRpdmUpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKHByaW1pdGl2ZTogYW55LCBnZW9tZXRyeVByb3BzOiBhbnksIGluc3RhbmNlUHJvcHM6IGFueSwgcHJpbWl0aXZlUHJvcHM6IGFueSkge1xyXG4gICAgaW5zdGFuY2VQcm9wcy5nZW9tZXRyeSA9IG5ldyB0aGlzLmdlb21ldHJ5VHlwZShnZW9tZXRyeVByb3BzKTtcclxuICAgIHByaW1pdGl2ZVByb3BzLmdlb21ldHJ5SW5zdGFuY2VzID0gbmV3IEdlb21ldHJ5SW5zdGFuY2UoaW5zdGFuY2VQcm9wcyk7XHJcbiAgICB0aGlzLl9jZXNpdW1Db2xsZWN0aW9uLnJlbW92ZShwcmltaXRpdmUpO1xyXG4gICAgcmV0dXJuIHN1cGVyLmFkZChuZXcgUHJpbWl0aXZlKHByaW1pdGl2ZVByb3BzKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==