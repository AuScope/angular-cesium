import { Injectable } from '@angular/core';
import { EditablePolygon } from '../../../models/editable-polygon';
import * as i0 from "@angular/core";
export class PolygonsManagerService {
    constructor() {
        this.polygons = new Map();
    }
    createEditablePolygon(id, editPolygonsLayer, editPointsLayer, editPolylinesLayer, coordinateConverter, polygonOptions, positions) {
        const editablePolygon = new EditablePolygon(id, editPolygonsLayer, editPointsLayer, editPolylinesLayer, coordinateConverter, polygonOptions, positions);
        this.polygons.set(id, editablePolygon);
    }
    dispose(id) {
        this.polygons.get(id).dispose();
        this.polygons.delete(id);
    }
    get(id) {
        return this.polygons.get(id);
    }
    clear() {
        this.polygons.forEach(polygon => polygon.dispose());
        this.polygons.clear();
    }
}
PolygonsManagerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: PolygonsManagerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
PolygonsManagerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: PolygonsManagerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: PolygonsManagerService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9seWdvbnMtbWFuYWdlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9hbmd1bGFyLWNlc2l1bS13aWRnZXRzL3NlcnZpY2VzL2VudGl0eS1lZGl0b3JzL3BvbHlnb25zLWVkaXRvci9wb2x5Z29ucy1tYW5hZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7O0FBTW5FLE1BQU0sT0FBTyxzQkFBc0I7SUFEbkM7UUFFRSxhQUFRLEdBQWlDLElBQUksR0FBRyxFQUEyQixDQUFDO0tBOEI3RTtJQTVCQyxxQkFBcUIsQ0FBQyxFQUFVLEVBQUUsaUJBQW1DLEVBQUUsZUFBaUMsRUFDbEYsa0JBQW9DLEVBQUUsbUJBQXdDLEVBQzlFLGNBQW1DLEVBQUUsU0FBd0I7UUFDakYsTUFBTSxlQUFlLEdBQUcsSUFBSSxlQUFlLENBQ3pDLEVBQUUsRUFDRixpQkFBaUIsRUFDakIsZUFBZSxFQUNmLGtCQUFrQixFQUNsQixtQkFBbUIsRUFDbkIsY0FBYyxFQUNkLFNBQVMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLGVBQWUsQ0FDcEMsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPLENBQUMsRUFBVTtRQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsR0FBRyxDQUFDLEVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hCLENBQUM7O21IQTlCVSxzQkFBc0I7dUhBQXRCLHNCQUFzQjsyRkFBdEIsc0JBQXNCO2tCQURsQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDYXJ0ZXNpYW4zIH0gZnJvbSAnY2VzaXVtJztcclxuaW1wb3J0IHsgRWRpdGFibGVQb2x5Z29uIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL2VkaXRhYmxlLXBvbHlnb24nO1xyXG5pbXBvcnQgeyBQb2x5Z29uRWRpdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvcG9seWdvbi1lZGl0LW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBBY0xheWVyQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vYW5ndWxhci1jZXNpdW0vY29tcG9uZW50cy9hYy1sYXllci9hYy1sYXllci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDb29yZGluYXRlQ29udmVydGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vYW5ndWxhci1jZXNpdW0vc2VydmljZXMvY29vcmRpbmF0ZS1jb252ZXJ0ZXIvY29vcmRpbmF0ZS1jb252ZXJ0ZXIuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQb2x5Z29uc01hbmFnZXJTZXJ2aWNlIHtcclxuICBwb2x5Z29uczogTWFwPHN0cmluZywgRWRpdGFibGVQb2x5Z29uPiA9IG5ldyBNYXA8c3RyaW5nLCBFZGl0YWJsZVBvbHlnb24+KCk7XHJcblxyXG4gIGNyZWF0ZUVkaXRhYmxlUG9seWdvbihpZDogc3RyaW5nLCBlZGl0UG9seWdvbnNMYXllcjogQWNMYXllckNvbXBvbmVudCwgZWRpdFBvaW50c0xheWVyOiBBY0xheWVyQ29tcG9uZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0UG9seWxpbmVzTGF5ZXI6IEFjTGF5ZXJDb21wb25lbnQsIGNvb3JkaW5hdGVDb252ZXJ0ZXI6IENvb3JkaW5hdGVDb252ZXJ0ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlnb25PcHRpb25zPzogUG9seWdvbkVkaXRPcHRpb25zLCBwb3NpdGlvbnM/OiBDYXJ0ZXNpYW4zW10pIHtcclxuICAgIGNvbnN0IGVkaXRhYmxlUG9seWdvbiA9IG5ldyBFZGl0YWJsZVBvbHlnb24oXHJcbiAgICAgIGlkLFxyXG4gICAgICBlZGl0UG9seWdvbnNMYXllcixcclxuICAgICAgZWRpdFBvaW50c0xheWVyLFxyXG4gICAgICBlZGl0UG9seWxpbmVzTGF5ZXIsXHJcbiAgICAgIGNvb3JkaW5hdGVDb252ZXJ0ZXIsXHJcbiAgICAgIHBvbHlnb25PcHRpb25zLFxyXG4gICAgICBwb3NpdGlvbnMpO1xyXG4gICAgdGhpcy5wb2x5Z29ucy5zZXQoaWQsIGVkaXRhYmxlUG9seWdvblxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoaWQ6IHN0cmluZykge1xyXG4gICAgdGhpcy5wb2x5Z29ucy5nZXQoaWQpLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMucG9seWdvbnMuZGVsZXRlKGlkKTtcclxuICB9XHJcblxyXG4gIGdldChpZDogc3RyaW5nKTogRWRpdGFibGVQb2x5Z29uIHtcclxuICAgIHJldHVybiB0aGlzLnBvbHlnb25zLmdldChpZCk7XHJcbiAgfVxyXG5cclxuICBjbGVhcigpIHtcclxuICAgIHRoaXMucG9seWdvbnMuZm9yRWFjaChwb2x5Z29uID0+IHBvbHlnb24uZGlzcG9zZSgpKTtcclxuICAgIHRoaXMucG9seWdvbnMuY2xlYXIoKTtcclxuICB9XHJcbn1cclxuIl19