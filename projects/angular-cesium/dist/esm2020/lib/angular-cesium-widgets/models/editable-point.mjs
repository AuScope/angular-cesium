import { Color, CallbackProperty } from 'cesium';
import { AcEntity } from '../../angular-cesium/models/ac-entity';
import { EditPoint } from './edit-point';
import { defaultLabelProps } from './label-props';
export class EditablePoint extends AcEntity {
    constructor(id, pointLayer, coordinateConverter, editOptions, position) {
        super();
        this.id = id;
        this.pointLayer = pointLayer;
        this.coordinateConverter = coordinateConverter;
        this.editOptions = editOptions;
        this._enableEdit = true;
        this._labels = [];
        this._props = { ...editOptions.pointProps };
        if (position) {
            this.createFromExisting(position);
        }
    }
    get labels() {
        return this._labels;
    }
    set labels(labels) {
        if (!labels) {
            return;
        }
        const position = this.point.getPosition();
        this._labels = labels.map((label, index) => {
            if (!label.position) {
                label.position = position;
            }
            return Object.assign({}, defaultLabelProps, label);
        });
    }
    get props() {
        return this._props;
    }
    set props(value) {
        this._props = value;
    }
    get enableEdit() {
        return this._enableEdit;
    }
    set enableEdit(value) {
        this._enableEdit = value;
        if (value) {
            this.point.props.color = Color.WHITE;
        }
        else {
            this.point.props.color = Color.DIMGREY;
            this.point.props.pixelSize = 10;
        }
        this.updatePointLayer();
    }
    createFromExisting(position) {
        this.point = new EditPoint(this.id, position, this._props);
        this.updatePointLayer();
    }
    hasPosition(point) {
        if (point.position) {
            return true;
        }
        return false;
    }
    setManually(point, props) {
        if (!this.enableEdit) {
            throw new Error('Update manually only in edit mode, after point is created');
        }
        let newProps = props;
        if (this.hasPosition(point)) {
            newProps = point.pointProp ? point.pointProp : props;
            this.point.setPosition(point.position);
        }
        else {
            this.point.setPosition(point);
        }
        this.point.props = newProps;
        this.updatePointLayer();
    }
    addLastPoint(position) {
        this.point.setPosition(position);
        this.updatePointLayer();
    }
    movePoint(toPosition) {
        if (!this.point) {
            this.point = new EditPoint(this.id, toPosition, this._props);
        }
        else {
            this.point.setPosition(toPosition);
        }
        this.updatePointLayer();
    }
    getCurrentPoint() {
        return this.point;
    }
    getPosition() {
        return this.point.getPosition();
    }
    getPositionCallbackProperty() {
        return new CallbackProperty(this.getPosition.bind(this), false);
    }
    updatePointLayer() {
        this.pointLayer.update(this.point, this.point.getId());
    }
    update() {
        this.updatePointLayer();
    }
    dispose() {
        this.pointLayer.remove(this.point.getId());
    }
    getId() {
        return this.id;
    }
}
//# sourceMappingURL=data:application/json;base64,